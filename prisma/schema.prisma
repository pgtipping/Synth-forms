// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with enhanced organization details and usage tracking
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  role            String    @default("USER")
  organization    Json?     // Detailed organization settings
  preferences     Json?     // This will store our auth preferences
  usage           Json?     // Usage statistics tracking
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  templates       Template[]
  auditLogs       AuditLog[]
  formResponses   FormResponse[]
  customizations  Customization[]
  formConversions FormConversion[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

// Template section model for reordering
model TemplateSection {
  id          String    @id @default(cuid())
  title       String
  content     Json      // Section content and fields
  order       Int       // Position in the template
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("template_sections")
  @@index([templateId, order])
}

// Template model with enhanced version control and metadata
model Template {
  id              String    @id @default(cuid())
  title           String
  description     String?
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  tags            String[]
  version         Int       @default(1)
  parentVersionId String?   // For version tracking
  versionHistory  Json?     // Array of version metadata
  migrationNotes  Json?     // Migration notes between versions
  status          TemplateStatus @default(DRAFT)
  content         Json      // Template content/structure
  metadata        Json?     // Conversion tracking, original format, etc.
  formDefinition  Json?     // Structured form definition
  customizableAreas Json?   // Areas that can be customized
  previewImage    String?   // Path to preview image
  active          Boolean   @default(true)
  sections        TemplateSection[] 
  originalPath    String?
  fileType        String?
  size            Int?
  hasWatermark    Boolean?
  processedAt     DateTime?
  conversionResult Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       User      @relation(fields: [userId], references: [id])
  userId          String
  formFields      FormField[]
  customizations  Customization[]
  formResponses   FormResponse[]
  childVersions   Template[] @relation("TemplateVersions")
  parentVersion   Template?  @relation("TemplateVersions", fields: [parentVersionId], references: [id])
  conversions     FormConversion[] @relation("TemplateConversions")

  @@map("templates")
}

enum TemplateStatus {
  DRAFT
  READY
  PROCESSING
  ARCHIVED
  ERROR
}

// Form Fields model with enhanced validation and dependencies
model FormField {
  id              String    @id @default(cuid())
  name            String
  label           String
  type            FieldType
  required        Boolean   @default(false)
  validationRules Json?     // Validation rules and constraints
  dependencies    Json?     // Field dependencies for conditional logic
  defaultValue    String?
  placeholder     String?
  options         Json?     // Options for select/radio/checkbox fields
  template        Template  @relation(fields: [templateId], references: [id])
  templateId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  DATE
  SELECT
  RADIO
  CHECKBOX
  FILE
  RICH_TEXT
}

// Enhanced template customization model
model Customization {
  id                String    @id @default(cuid())
  name              String?   // Custom name for saved customization
  branding          Json?     // Logo, colors, position settings
  fieldCustomizations Json?   // Field-level customizations (labels, placeholders)
  typography        Json?     // Font settings for headers and body
  template          Template  @relation(fields: [templateId], references: [id])
  templateId        String
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  lastUsed          DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Enhanced form response model with status tracking
model FormResponse {
  id              String    @id @default(cuid())
  data            Json      // Form field values
  status          ResponseStatus @default(DRAFT)
  templateVersion Int       // Version of template used
  metadata        Json?     // Submission metadata (IP, user agent, etc.)
  template        Template  @relation(fields: [templateId], references: [id])
  templateId      String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum ResponseStatus {
  DRAFT
  PENDING_REVIEW
  SUBMITTED
  ARCHIVED
}

// Categories for organizing templates
model Category {
  id          String     @id @default(cuid())
  name        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  templates   Template[] // Relation to templates
  metadata    Json?     // For additional category settings
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([parentId])
  @@map("categories")
}

// Audit log for tracking important changes
model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime    @default(now())
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
}

enum AuditAction {
  LOGIN
  LOGOUT
  REGISTER
  TEMPLATE_CREATE
  TEMPLATE_UPDATE
  TEMPLATE_DELETE
  TEMPLATE_PREVIEW
  TEMPLATE_EXPORT
  TEMPLATE_PROCESSED
  TEMPLATE_PROCESSING_ERROR
  FORM_SUBMIT
  FORM_SAVE_DRAFT
  FORM_VALIDATE
  USER_UPDATE
  SETTINGS_CHANGE
  SYSTEM_ERROR
  FILE_WATCHER_ERROR
}

// Template processing tracking
model TemplateProcessing {
  id          String      @id @default(cuid())
  filePath    String
  fileName    String
  fileType    String
  status      String      @default("PENDING") // PENDING, PROCESSING, COMPLETED, ERROR
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  error       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("template_processing")
}

// System status tracking
model SystemStatus {
  id        String            @id @default(cuid())
  type      SystemStatusType
  status    SystemStatusState
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum SystemStatusType {
  FILE_WATCHER
  TEMPLATE_PROCESSOR
  FORM_CONVERTER
}

enum SystemStatusState {
  STARTING
  RUNNING
  STOPPED
  ERROR
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Form conversion model
model FormConversion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  status    String
  progress  Int      @default(0)
  error     String?
  templateId String?
  template   Template? @relation("TemplateConversions", fields: [templateId], references: [id])
  userId    String
  createdBy User     @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([userId])
  @@index([templateId])
}
